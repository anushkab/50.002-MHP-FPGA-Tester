/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    output reg io_adder0,
    output reg io_adder1,
    output reg io_adder2,
    input io_fpga0,
    input io_fpga1
  );
  
  
  
  reg rst;
  
  reg mode;
  
  reg restart;
  
  reg bit0;
  
  reg bit1;
  
  reg customclk;
  
  reg errorcheck;
  
  localparam TIME = 5'h19;
  
  localparam TOL = 5'h1d;
  
  
  localparam STATE0_sm = 5'd0;
  localparam STATE1_sm = 5'd1;
  localparam STATE2_sm = 5'd2;
  localparam STATE3_sm = 5'd3;
  localparam STATE4_sm = 5'd4;
  localparam STATE5_sm = 5'd5;
  localparam STATE6_sm = 5'd6;
  localparam STATE7_sm = 5'd7;
  localparam END_sm = 5'd8;
  localparam ERR0_sm = 5'd9;
  localparam ERR1_sm = 5'd10;
  localparam ERR2_sm = 5'd11;
  localparam ERR3_sm = 5'd12;
  localparam ERR4_sm = 5'd13;
  localparam ERR5_sm = 5'd14;
  localparam ERR6_sm = 5'd15;
  localparam ERR7_sm = 5'd16;
  
  reg [4:0] M_sm_d, M_sm_q = STATE0_sm;
  
  reg [24:0] M_counter_d, M_counter_q = 1'h0;
  
  reg [28:0] M_errorcount_d, M_errorcount_q = 1'h0;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_seg_seg;
  wire [4-1:0] M_seg_sel;
  reg [16-1:0] M_seg_values;
  multi_seven_seg_2 seg (
    .clk(clk),
    .rst(rst),
    .values(M_seg_values),
    .seg(M_seg_seg),
    .sel(M_seg_sel)
  );
  
  always @* begin
    M_sm_d = M_sm_q;
    M_counter_d = M_counter_q;
    M_errorcount_d = M_errorcount_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = ~M_seg_seg;
    io_sel = ~M_seg_sel;
    mode = io_dip[0+7+0-:1];
    M_seg_values = 16'hffff;
    if (mode) begin
      io_adder0 = 1'h0;
      io_adder1 = 1'h0;
      io_adder2 = 1'h0;
      bit0 = io_fpga0;
      bit1 = io_fpga1;
      restart = io_button[0+0-:1];
      M_counter_d = M_counter_q + 1'h1;
      M_errorcount_d = M_errorcount_q + 1'h1;
      if (M_counter_q[24+0-:1] == 1'h1) begin
        customclk = 1'h1;
        io_led[16+7+0-:1] = 1'h1;
      end else begin
        customclk = 1'h0;
        io_led[16+7+0-:1] = 1'h0;
      end
      if (M_errorcount_q[28+0-:1] == 1'h1) begin
        errorcheck = 1'h1;
        io_led[16+6+0-:1] = 1'h1;
      end else begin
        errorcheck = 1'h0;
        io_led[16+6+0-:1] = 1'h0;
      end
      
      case (M_sm_q)
        STATE0_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h0;
          io_adder2 = 1'h0;
          io_led[0+0+0-:1] = 1'h1;
          M_seg_values = 16'hf000;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h0) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE1_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR0_sm;
              end else begin
                M_sm_d = STATE0_sm;
              end
            end
          end
        end
        STATE1_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h0;
          io_adder2 = 1'h0;
          io_led[0+1+0-:1] = 1'h1;
          M_seg_values = 16'hf001;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE2_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR1_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE1_sm;
                end
              end
            end
          end
        end
        STATE2_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h1;
          io_adder2 = 1'h0;
          io_led[0+2+0-:1] = 1'h1;
          M_seg_values = 16'hf011;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE3_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR2_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE2_sm;
                end
              end
            end
          end
        end
        STATE3_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h1;
          io_adder2 = 1'h0;
          io_led[0+3+0-:1] = 1'h1;
          M_seg_values = 16'hf010;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE4_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR3_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE3_sm;
                end
              end
            end
          end
        end
        STATE4_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h1;
          io_adder2 = 1'h1;
          io_led[0+4+0-:1] = 1'h1;
          M_seg_values = 16'hf110;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE5_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR4_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE4_sm;
                end
              end
            end
          end
        end
        STATE5_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h0;
          io_adder2 = 1'h1;
          io_led[0+5+0-:1] = 1'h1;
          M_seg_values = 16'hf100;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE6_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR5_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE5_sm;
                end
              end
            end
          end
        end
        STATE6_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h0;
          io_adder2 = 1'h1;
          io_led[0+6+0-:1] = 1'h1;
          M_seg_values = 16'hf110;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
              M_errorcount_d = 1'h0;
              M_sm_d = STATE7_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR6_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE6_sm;
                end
              end
            end
          end
        end
        STATE7_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h1;
          io_adder2 = 1'h1;
          io_led[0+7+0-:1] = 1'h1;
          M_seg_values = 16'hf111;
          if (customclk == 1'h1) begin
            if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h1) begin
              M_errorcount_d = 1'h0;
              M_sm_d = END_sm;
            end else begin
              if (errorcheck == 1'h1) begin
                M_sm_d = ERR7_sm;
              end else begin
                if (restart == 1'h1) begin
                  M_sm_d = STATE0_sm;
                end else begin
                  M_sm_d = STATE7_sm;
                end
              end
            end
          end
        end
        END_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h0;
          io_adder2 = 1'h0;
          io_led[16+0+0-:1] = 1'h1;
          M_seg_values = 16'hfabc;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              M_sm_d = END_sm;
            end
          end
        end
        ERR0_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h0;
          io_adder2 = 1'h0;
          io_led[8+0+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h0) begin
                M_sm_d = STATE1_sm;
              end else begin
                M_sm_d = ERR0_sm;
              end
            end
          end
        end
        ERR1_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h0;
          io_adder2 = 1'h0;
          io_led[8+1+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
                M_sm_d = STATE2_sm;
              end else begin
                M_sm_d = ERR1_sm;
              end
            end
          end
        end
        ERR2_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h1;
          io_adder2 = 1'h0;
          io_led[8+2+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
                M_sm_d = STATE3_sm;
              end else begin
                M_sm_d = ERR2_sm;
              end
            end
          end
        end
        ERR3_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h1;
          io_adder2 = 1'h0;
          io_led[8+3+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
                M_sm_d = STATE4_sm;
              end else begin
                M_sm_d = ERR3_sm;
              end
            end
          end
        end
        ERR4_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h1;
          io_adder2 = 1'h1;
          io_led[8+4+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
                M_sm_d = STATE5_sm;
              end else begin
                M_sm_d = ERR4_sm;
              end
            end
          end
        end
        ERR5_sm: begin
          io_adder0 = 1'h0;
          io_adder1 = 1'h0;
          io_adder2 = 1'h1;
          io_led[8+5+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h0) begin
                M_sm_d = STATE6_sm;
              end else begin
                M_sm_d = ERR5_sm;
              end
            end
          end
        end
        ERR6_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h0;
          io_adder2 = 1'h1;
          io_led[8+6+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h0 && bit1 == 1'h1) begin
                M_sm_d = STATE7_sm;
              end else begin
                M_sm_d = ERR6_sm;
              end
            end
          end
        end
        ERR7_sm: begin
          io_adder0 = 1'h1;
          io_adder1 = 1'h1;
          io_adder2 = 1'h1;
          io_led[8+7+0-:1] = 1'h1;
          M_seg_values = 16'hfadd;
          M_errorcount_d = 1'h0;
          if (customclk == 1'h1) begin
            if (restart == 1'h1) begin
              M_sm_d = STATE0_sm;
            end else begin
              if (restart == 1'h0 && bit0 == 1'h1 && bit1 == 1'h1) begin
                M_sm_d = END_sm;
              end else begin
                M_sm_d = ERR7_sm;
              end
            end
          end
        end
      endcase
    end else begin
      io_adder0 = io_dip[0+0+0-:1];
      io_adder1 = io_dip[0+1+0-:1];
      io_adder2 = io_dip[0+2+0-:1];
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_sm_q <= 1'h0;
    end else begin
      M_sm_q <= M_sm_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_errorcount_q <= 1'h0;
    end else begin
      M_errorcount_q <= M_errorcount_d;
    end
  end
  
endmodule
